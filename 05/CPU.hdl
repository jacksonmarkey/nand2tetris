// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // determines whether we have an A-instruction (instruction[15]==0)
    // and need to store the instruction in our ARegister, or a C-instruction
    // (instruction[15]==1) and (possibly, depending on instruction[5]) need
    // to store the result from our computation in our ARegister
    // see Chapter 4 for details on the Hack machine language specifications

    Mux16(a = instruction, b = compOutput, sel = instruction[15], out = ARegInput);
    Not(in = instruction[15], out = AInstruction);
    Or(a = AInstruction, b = instruction[5], out = AStore);
    ARegister(in = ARegInput, load = AStore, out = AValue, out[0..14] = addressM);

    // given a C-instruction, determines whether we will be operating on the
    // address value A (instruction[12]==0) or on the value stored at address A
    // (instruction[12]==1)
    Mux16(a = AValue, b = inM, sel = instruction[12], out = y);

    // performs the computation associated with a C-instruction
    ALU(
      x = x, // we always operate on the contents of the D register
      y = y,
      zx = instruction[11],
      nx = instruction[10],
      zy = instruction[9],
      ny = instruction[8],
      f = instruction[7],
      no = instruction[6],
      out = compOutput,
      out = outM,
      ng = ng,
      zr = zr);

    // determines whether we need to load our computed value into the local
    // D register (if we have both a C-instruction (intstruction[15]) and the
    // marker to store the value in D (instruction[4]))
    And(a = instruction[15], b = instruction[4], out = DLoad);
    DRegister(in = compOutput, load = DLoad, out = x);

    // determines whether we need to write our output to the M register, located
    // in memory at address A
    And(a = instruction[15], b = instruction[3], out = writeM);

    // logic determining if we have to jump
    And(a = ng, b = instruction[2], out = negJump);
    And(a = zr, b = instruction[1], out = zeroJump);
    Or(a = ng, b = zr, out = notPositive);
    Not(in = notPositive, out = positive);
    And(a = positive, b = instruction[0], out = posJump);
    Or(a = negJump, b = zeroJump, out = jump0);
    Or(a = jump0, b = posJump, out = jump1);
    And(a = instruction[15], b = jump1, out = jump);

    // determines the address of the next instruction, depending on whether
    // we jump, reset, or just increment
    PC(in = AValue, load = jump, inc = true, reset = reset, out[0..14] = pc);
}
