@256
D=A
@SP
M=D
@Sys.init$1$RETURNADDRESS
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$1$RETURNADDRESS)

(PUSHD)
@SP
A=M
M=D
@SP
M=M+1
@R15
A=M
0;JMP

(POPD)
@SP
AM=M-1
D=M
@R14
A=M
M=D
@R15
A=M
0;JMP

(EQ)
@SP
M=M-1
M=M-1
A=M+1
D=M
A=A-1
D=M-D
@PUSHTRUE
D;JEQ
@PUSHFALSE
0;JMP

(LT)
@SP
M=M-1
M=M-1
A=M+1
D=M
A=A-1
D=M-D
@PUSHTRUE
D;JLT
@PUSHFALSE
0;JMP

(GT)
@SP
M=M-1
M=M-1
A=M+1
D=M
A=A-1
D=M-D
@PUSHTRUE
D;JGT
@PUSHFALSE
0;JMP

(PUSHTRUE)
D=-1
@PUSHD
0;JMP

(PUSHFALSE)
D=0
@PUSHD
0;JMP

(STARTVM)

(Main.fibonacci)
@PUSHD2
D=A
@R15
M=D
@0
D=A
@2
A=D+M
D=M
@PUSHD
0;JMP
(PUSHD2)
@PUSHD3
D=A
@R15
M=D
@2
D=A
@PUSHD
0;JMP
(PUSHD3)
@LT4
D=A
@R15
M=D
@LT
0;JMP
(LT4)
@SP
AM=M-1
D=M
@Main.fibonacci$IF_TRUE
D;JNE
@Main.fibonacci$IF_FALSE
0;JMP
(Main.fibonacci$IF_TRUE)
@PUSHD5
D=A
@R15
M=D
@0
D=A
@2
A=D+M
D=M
@PUSHD
0;JMP
(PUSHD5)
@LCL
D=M
@15 // ROM[15] stores the FRAME variable
M=D
@5
A=D-A
D=M
@14 // ROM14 stores the RETURNADDRESS temp variable
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@15
A=M-1
D=M
@THAT
M=D
@15
A=M-1
A=A-1
D=M
@THIS
M=D
@15
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@15
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@14
A=M
0;JMP
(Main.fibonacci$IF_FALSE)
@PUSHD7
D=A
@R15
M=D
@0
D=A
@2
A=D+M
D=M
@PUSHD
0;JMP
(PUSHD7)
@PUSHD8
D=A
@R15
M=D
@2
D=A
@PUSHD
0;JMP
(PUSHD8)
@SP
AM=M-1
D=M
A=A-1
M=M-D
@Main.fibonacci$10$RETURNADDRESS
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$10$RETURNADDRESS)
@PUSHD11
D=A
@R15
M=D
@0
D=A
@2
A=D+M
D=M
@PUSHD
0;JMP
(PUSHD11)
@PUSHD12
D=A
@R15
M=D
@1
D=A
@PUSHD
0;JMP
(PUSHD12)
@SP
AM=M-1
D=M
A=A-1
M=M-D
@Main.fibonacci$14$RETURNADDRESS
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$14$RETURNADDRESS)
@SP
AM=M-1
D=M
A=A-1
M=M+D
@LCL
D=M
@15 // ROM[15] stores the FRAME variable
M=D
@5
A=D-A
D=M
@14 // ROM14 stores the RETURNADDRESS temp variable
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@15
A=M-1
D=M
@THAT
M=D
@15
A=M-1
A=A-1
D=M
@THIS
M=D
@15
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@15
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@14
A=M
0;JMP
(Sys.init)
@PUSHD17
D=A
@R15
M=D
@4
D=A
@PUSHD
0;JMP
(PUSHD17)
@Main.fibonacci$18$RETURNADDRESS
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$18$RETURNADDRESS)
(Sys.init$WHILE)
@Sys.init$WHILE
0;JMP
