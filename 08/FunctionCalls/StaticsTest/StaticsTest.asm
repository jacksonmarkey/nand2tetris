@256
D=A
@SP
M=D
@Sys.init$0$RETURNADDRESS
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$0$RETURNADDRESS)

(PUSHD)
@SP
A=M
M=D
@SP
M=M+1
@R15
A=M
0;JMP

(POPD)
@SP
AM=M-1
D=M
@R14
A=M
M=D
@R15
A=M
0;JMP

(EQ)
@SP
M=M-1
M=M-1
A=M+1
D=M
A=A-1
D=M-D
@PUSHTRUE
D;JEQ
@PUSHFALSE
0;JMP

(LT)
@SP
M=M-1
M=M-1
A=M+1
D=M
A=A-1
D=M-D
@PUSHTRUE
D;JLT
@PUSHFALSE
0;JMP

(GT)
@SP
M=M-1
M=M-1
A=M+1
D=M
A=A-1
D=M-D
@PUSHTRUE
D;JGT
@PUSHFALSE
0;JMP

(PUSHTRUE)
D=-1
@PUSHD
0;JMP

(PUSHFALSE)
D=0
@PUSHD
0;JMP

(STARTVM)

(Class1.set)
@PUSHD1
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@0
D=A
@2
A=D+M
D=M
@PUSHD
0;JMP
(PUSHD1)
@POPD2
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@Class1.0
D=A
@R14 // ROM[14] stores the address to which we want to pop our value
M=D
@POPD
0;JMP
(POPD2)
@PUSHD3
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@1
D=A
@2
A=D+M
D=M
@PUSHD
0;JMP
(PUSHD3)
@POPD4
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@Class1.1
D=A
@R14 // ROM[14] stores the address to which we want to pop our value
M=D
@POPD
0;JMP
(POPD4)
@PUSHD5
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@0
D=A
@PUSHD
0;JMP
(PUSHD5)
@LCL
D=M
@15 // ROM[15] stores the FRAME variable
M=D
@5
A=D-A
D=M
@14 // ROM14 stores the RETURNADDRESS temp variable
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@15
A=M-1
D=M
@THAT
M=D
@15
A=M-1
A=A-1
D=M
@THIS
M=D
@15
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@15
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@14
A=M
0;JMP
(Class1.get)
@PUSHD6
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@Class1.0
D=M
@PUSHD
0;JMP
(PUSHD6)
@PUSHD7
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@Class1.1
D=M
@PUSHD
0;JMP
(PUSHD7)
@SP
AM=M-1
D=M
A=A-1
M=M-D
@LCL
D=M
@15 // ROM[15] stores the FRAME variable
M=D
@5
A=D-A
D=M
@14 // ROM14 stores the RETURNADDRESS temp variable
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@15
A=M-1
D=M
@THAT
M=D
@15
A=M-1
A=A-1
D=M
@THIS
M=D
@15
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@15
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@14
A=M
0;JMP
(Class2.set)
@PUSHD8
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@0
D=A
@2
A=D+M
D=M
@PUSHD
0;JMP
(PUSHD8)
@POPD9
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@Class2.0
D=A
@R14 // ROM[14] stores the address to which we want to pop our value
M=D
@POPD
0;JMP
(POPD9)
@PUSHD10
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@1
D=A
@2
A=D+M
D=M
@PUSHD
0;JMP
(PUSHD10)
@POPD11
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@Class2.1
D=A
@R14 // ROM[14] stores the address to which we want to pop our value
M=D
@POPD
0;JMP
(POPD11)
@PUSHD12
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@0
D=A
@PUSHD
0;JMP
(PUSHD12)
@LCL
D=M
@15 // ROM[15] stores the FRAME variable
M=D
@5
A=D-A
D=M
@14 // ROM14 stores the RETURNADDRESS temp variable
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@15
A=M-1
D=M
@THAT
M=D
@15
A=M-1
A=A-1
D=M
@THIS
M=D
@15
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@15
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@14
A=M
0;JMP
(Class2.get)
@PUSHD13
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@Class2.0
D=M
@PUSHD
0;JMP
(PUSHD13)
@PUSHD14
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@Class2.1
D=M
@PUSHD
0;JMP
(PUSHD14)
@SP
AM=M-1
D=M
A=A-1
M=M-D
@LCL
D=M
@15 // ROM[15] stores the FRAME variable
M=D
@5
A=D-A
D=M
@14 // ROM14 stores the RETURNADDRESS temp variable
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@15
A=M-1
D=M
@THAT
M=D
@15
A=M-1
A=A-1
D=M
@THIS
M=D
@15
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@15
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@14
A=M
0;JMP
(Sys.init)
@PUSHD15
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@6
D=A
@PUSHD
0;JMP
(PUSHD15)
@PUSHD16
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@8
D=A
@PUSHD
0;JMP
(PUSHD16)
@Class1.set$17$RETURNADDRESS
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.set
0;JMP
(Class1.set$17$RETURNADDRESS)
@POPD18
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@0
D=A
@5
D=A+D
@R14 // ROM[14] stores the address to which we want to pop our value
M=D
@POPD
0;JMP
(POPD18)
@PUSHD19
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@23
D=A
@PUSHD
0;JMP
(PUSHD19)
@PUSHD20
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@15
D=A
@PUSHD
0;JMP
(PUSHD20)
@Class2.set$21$RETURNADDRESS
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.set
0;JMP
(Class2.set$21$RETURNADDRESS)
@POPD22
D=A
@R15 // ROM[15] stores our eventual return address
M=D
@0
D=A
@5
D=A+D
@R14 // ROM[14] stores the address to which we want to pop our value
M=D
@POPD
0;JMP
(POPD22)
@Class1.get$23$RETURNADDRESS
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.get
0;JMP
(Class1.get$23$RETURNADDRESS)
@Class2.get$24$RETURNADDRESS
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.get
0;JMP
(Class2.get$24$RETURNADDRESS)
(Sys.init$WHILE)
@Sys.init$WHILE
0;JMP
